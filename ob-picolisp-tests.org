* Test Cases for ob-picolisp.el
Evaluate single codeblocks with C-c C-c (with point inside sourceblock).
Evaluate subheaders (all sourceblocks under one header of outline-tree)
with C-c C-v s (with point on subheader). 

If confirming each evaluation seems annoying, set the following
variable to nil (considering the security issues):
M-x customize-variable RET org-confirm-babel-evaluate

When experimenting with this code-blocks, results will be replaced by the
results of the next evaluation (':results replace' is the default
value). This can be changed by using ':results append' or ':results
prepend'. If you don't want to see any results in this buffer, use
':results silent'. 

(on github, view this file in raw-mode)

** data

*** table-data

    #+tblname: tbl1
    | 1 | 2 | 3 |
    |---+---+---|
    | 4 | 5 | 6 |
    | 7 | 8 | 9 |

    #+tblname: tbl2
    | col1 | col2 | col3 |
    |------+------+------|
    |    4 |    5 |    6 |
    |    7 |    8 |    9 |


    #+tblname: tbl3
    | row1 | 2 | 3 |
    |------+---+---|
    | row2 | 5 | 6 |
    | row3 | 8 | 9 |


    #+tblname: tbl4

    |      | col2 | col3 |
    |------+------+------|
    | row2 |    5 |    6 |
    | row3 |    8 |    9 |



** header-args
*** external

**** :results value

     #+srcname: exval
     #+begin_src picolisp :var tab=tbl1 :results value :hlines no 
       (+ (caar tab) (caar (cdr tab)))
       (println 4)
       (print (+ (caar tab) (caar (cdr tab))))
     #+end_src

     #+results: exval
     : 5


     #+srcname: exval-pp
     #+begin_src picolisp :var tab=tbl1 :results value pp :hlines no 
       '(a (b c d) (e (f (g) (h) (i)) (j (k) (l) (m))) (n o p) q)
     #+end_src

     #+results: exval-pp
     : (a
     :    (b c d)
     :    (e
     :       (f (g) (h) (i))
     :       (j (k) (l) (m)) )
     :    (n o p)
     :    q )






**** :results output

     #+srcname: exout
     #+begin_src picolisp :var tab=tbl1 :results output :hlines no 
       (+ (caar tab) (caar (cdr tab)))
       (println 4)
       (print (+ (caar tab) (caar (cdr tab))))
     #+end_src

     #+results: exout
     : 4
     : 5


     #+srcname: exout-pp
     #+begin_src picolisp :var tab=tbl1 :results output pp :hlines no 
       '(a (b c d) (e (f (g) (h) (i)) (j (k) (l) (m))) (n o p) q)
     #+end_src

     #+results: exout-pp
     : (a
     :    (b c d)
     :    (e
     :       (f (g) (h) (i))
     :       (j (k) (l) (m)) )
     :    (n o p)
     :    q )





*** session
    :PROPERTIES:
    :session: *PL*
    :END:

**** :results value


     #+srcname: sval
     #+begin_src picolisp :var tab=tbl1 :results value :hlines no
       (+ (caar tab) (caar (cdr tab)))
       (println 4)
       (print (+ (caar tab) (caar (cdr tab))))
     #+end_src

     #+results: sval
     : 5


     #+srcname: sval-pp
     #+begin_src picolisp :var tab=tbl1 :results pp :hlines no 
       '(a (b c d) (e (f (g) (h) (i)) (j (k) (l) (m))) (n o p) q)
     #+end_src

     #+results: sval-pp
     : (a
     :    (b c d)
     :    (e
     :       (f (g) (h) (i))
     :       (j (k) (l) (m)) )
     :    (n o p)
     :    q )-> ")"



**** :results output

     #+srcname: sout
     #+begin_src picolisp :var tab=tbl1 :results output :hlines no 
       (+ (caar tab) (caar (cdr tab)))
       (println 4)
       (print (+ (caar tab) (caar (cdr tab))))
     #+end_src

     #+results: sout
     : 4
     : 5



     #+srcname: sout-pp
     #+begin_src picolisp :var tab=tbl1 :results output pp :hlines no 
       '(a (b c d) (e (f (g) (h) (i)) (j (k) (l) (m))) (n o p) q)
     #+end_src

     #+results: sout-pp
     : (a
     :    (b c d)
     :    (e
     :       (f (g) (h) (i))
     :       (j (k) (l) (m)) )
     :    (n o p)
     :    q )





